import streamlit as st
import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
from scipy.stats import skew, kurtosis
from statsmodels.stats.proportion import proportions_ztest
from scipy.stats import chi2_contingency

# T칤tulo con Markdown
st.markdown('# **An치lisis A/B Web Vanguard** 游늳')

# Sidebar para opciones
st.sidebar.title('Opciones del An치lisis')

# Filtrar por grupo (Test/Control)
grupo_seleccionado = st.sidebar.selectbox('Seleccione el grupo', ['Ambos', 'Test', 'Control'])

# Filtrar por tipo de usuario (Lineal/No Lineal)
usuario_tipo = st.sidebar.radio('Seleccione el tipo de usuario', ['Todos', 'Lineal', 'No Lineal'])

# Selecci칩n de paso espec칤fico
paso_seleccionado = st.sidebar.selectbox('Seleccione el paso a analizar', ['Todos', 'start', 'step_1', 'step_2', 'step_3', 'confirm'])

# Funci칩n para cargar los datos con cache
@st.cache_data
def cargar_datos():
    df = pd.read_csv('../data/cleaned/vanguard.csv', index_col=None)  # Evita cargar un 칤ndice extra
    return df

# Cargar los datos
df_vanguard = cargar_datos()

# Crear una copia del DataFrame original para aplicar los filtros
df_filtrado = df_vanguard.copy()

# Filtrar los datos seg칰n el grupo seleccionado
if grupo_seleccionado != 'Ambos':
    df_filtrado = df_filtrado[df_filtrado['variation'] == grupo_seleccionado]

# Filtrar los datos seg칰n el tipo de usuario seleccionado
if usuario_tipo == 'Lineal':
    df_filtrado = df_filtrado[df_filtrado['lineal'] == True]
elif usuario_tipo == 'No Lineal':
    df_filtrado = df_filtrado[df_filtrado['lineal'] == False]

# Filtrar los datos seg칰n el paso seleccionado
if paso_seleccionado != 'Todos':
    df_filtrado = df_filtrado[df_filtrado['step'] == paso_seleccionado]

def calculate_completion_rates(df):
    total_clientes_por_variacion = df.drop_duplicates(subset=['client_id', 'variation']).groupby('variation')['client_id'].nunique()

    # Asegurarse de que no hay solapamiento entre clientes "lineal=True" y "lineal=False"
    lineal_true = df[(df['lineal'] == True)].drop_duplicates(subset=['client_id', 'variation'])
    lineal_false = df[(df['lineal'] == False) & (~df['client_id'].isin(lineal_true['client_id']))].drop_duplicates(subset=['client_id', 'variation'])

    # Calculamos la tasa de finalizaci칩n para los que completaron el proceso de manera lineal
    completion_rate_lineal_true = lineal_true.groupby('variation')['client_id'].nunique() / total_clientes_por_variacion

    # Calculamos la tasa de "no finalizaci칩n" para los que no completaron el proceso de manera lineal
    completion_rate_lineal_false = lineal_false.groupby('variation')['client_id'].nunique() / total_clientes_por_variacion

    # Suma de tasas
    suma_tasas = completion_rate_lineal_true + completion_rate_lineal_false

    return completion_rate_lineal_true, completion_rate_lineal_false, suma_tasas

def plot_completion_rates(completion_rate_true, completion_rate_false):
    completion_rates = pd.DataFrame({
        'Lineal=True': completion_rate_true,
        'Lineal=False': completion_rate_false
    })

    # Generar el gr치fico de barras
    completion_rates.plot(kind='bar', figsize=(10, 6), color=['#4CAF50', '#FF5733'])

    # A침adir etiquetas y t칤tulo
    plt.title('Tasa de Finalizaci칩n y No Finalizaci칩n por Grupo (Test vs Control)')
    plt.xlabel('Grupo')
    plt.ylabel('Proporci칩n de Clientes')
    plt.xticks(rotation=0)
    plt.legend(title='Condici칩n')
    plt.show()

def plot_avg_time_in_steps(df, step_order):
    # Asegurarse de que la columna 'lineal' es booleana
    df['lineal'] = df['lineal'].astype(bool)
    
    # Asegurarse de que los pasos est치n correctamente categorizados
    df['step'] = pd.Categorical(df['step'], categories=step_order, ordered=True)

    # Agrupar por 'variation', 'lineal', y 'step' para calcular el tiempo promedio en cada paso
    avg_time_in_step_lineal = df.groupby(['variation', 'lineal', 'step'])['total_time_in_step'].mean().unstack()

    # Reindexar los pasos para reflejar el orden correcto
    avg_time_in_step_lineal = avg_time_in_step_lineal[step_order]

    # Crear un gr치fico que muestre las cuatro combinaciones
    plt.figure(figsize=(12, 6))

    # Graficar los datos para todas las combinaciones (Test/Control y Lineal/No Lineal)
    for variation, lineal in avg_time_in_step_lineal.index:
        if lineal:
            label = f"{variation} - Lineal"
            marker = 'o'
            linestyle = '-'
        else:
            label = f"{variation} - No Lineal"
            marker = 'x'
            linestyle = '--'
        
        avg_time_in_step_lineal.loc[(variation, lineal), :].T.plot(
            kind='line', marker=marker, linestyle=linestyle, figsize=(12, 6), ax=plt.gca(), label=label
        )

    # A침adir etiquetas y t칤tulo
    plt.title('Tiempo Promedio en Cada Paso: Test vs Control (Lineal vs No Lineal)')
    plt.xlabel('Paso')
    plt.ylabel('Tiempo Promedio (segundos)')
    plt.grid(True)
    plt.legend(title='Condici칩n (Test/Control - Lineal/No Lineal)', loc='upper left')
    plt.show()

    return avg_time_in_step_lineal

def plot_error_rate(df, step_order):
    # Definir una nueva columna para marcar los errores (retrocesos o repeticiones mayores a 2)
    df['error'] = (df['step_diff'] == -1) | (df['step_repeat_count'] > 2)

    # Agrupar por 'variation', 'lineal', y 'step' para calcular la tasa de errores
    error_rate = df.groupby(['variation', 'lineal', 'step'])['error'].mean().unstack()

    # Reordenar las columnas para reflejar el orden correcto de los pasos
    error_rate = error_rate[step_order]

    return error_rate

def calculate_and_plot_time_stats(df, step_order):
    grouped_time_stats = df.groupby(['variation', 'step', 'lineal'])['total_time_in_step'].agg(
        mean='mean',
        skew=lambda x: skew(x),
        kurtosis=lambda x: kurtosis(x)
    )

    # Reindexar el nivel de 'step' en el orden deseado
    grouped_time_stats = grouped_time_stats.reindex(step_order, level='step')

    # Graficar la media (mean)
    fig, ax = plt.subplots(figsize=(10, 6))
    grouped_time_stats['mean'].unstack().plot(kind='bar', ax=ax)
    ax.set_title('Mean Time per Step: Lineal vs Non-lineal (Test vs Control)')
    ax.set_ylabel('Mean Time (seconds)')
    ax.set_xlabel('Steps')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.show()

    # Graficar el skewness
    fig, ax = plt.subplots(figsize=(10, 6))
    grouped_time_stats['skew'].unstack().plot(kind='bar', ax=ax)
    ax.set_title('Skewness per Step: Lineal vs Non-lineal (Test vs Control)')
    ax.set_ylabel('Skewness')
    ax.set_xlabel('Steps')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.show()

    # Graficar la kurtosis
    fig, ax = plt.subplots(figsize=(10, 6))
    grouped_time_stats['kurtosis'].unstack().plot(kind='bar', ax=ax)
    ax.set_title('Kurtosis per Step: Lineal vs Non-lineal (Test vs Control)')
    ax.set_ylabel('Kurtosis')
    ax.set_xlabel('Steps')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.show()
    
    return grouped_time_stats

def calculate_and_plot_time_per_step(df, step_order):
    df_time_per_step = df.groupby(['variation', 'step'])['total_time_in_step'].mean().unstack()

    # Reordenar los pasos
    df_time_per_step = df_time_per_step[step_order]

    # Graficar los tiempos promedio por paso
    df_time_per_step.T.plot(kind='line', marker='o', figsize=(10, 6))
    plt.title('Tiempo Promedio por Paso: Test vs Control')
    plt.xlabel('Paso')
    plt.ylabel('Tiempo Promedio')
    plt.grid(True)
    plt.show()

    # Retornar el DataFrame con los tiempos promedio
    return df_time_per_step

def calculate_pearson_spearman_corr(df):
    pearson_corr = df[['balance', 'activity', 'age', 'num_accounts']].corr(method='pearson')
    spearman_corr = df[['balance', 'activity', 'age', 'num_accounts']].corr(method='spearman')

    plt.figure(figsize=(10, 6))
    sns.heatmap(pearson_corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
    plt.title('Pearson Correlation Heatmap')
    plt.show()

    plt.figure(figsize=(10, 6))
    sns.heatmap(spearman_corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
    plt.title('Spearman Correlation Heatmap')
    plt.show()

    return pearson_corr, spearman_corr

def z_test_completion_rates(df):
    n_test = df[df['variation'] == 'Test']['client_id'].nunique()  # N칰mero de usuarios en Test
    n_control = df[df['variation'] == 'Control']['client_id'].nunique()  # N칰mero de usuarios en Control

    completed_test = df[(df['variation'] == 'Test') & (df['lineal'] == True)]['client_id'].nunique()  # Usuarios que completaron el proceso en Test
    completed_control = df[(df['variation'] == 'Control') & (df['lineal'] == True)]['client_id'].nunique()  # Usuarios que completaron el proceso en Control

    p_test = completed_test / n_test
    p_control = completed_control / n_control

    count = [completed_test, completed_control]
    nobs = [n_test, n_control]

    stat, p_value = proportions_ztest(count, nobs)

    return stat, p_value

def t_test_time_per_step(df, step):
    time_test_lineal = df[(df['variation'] == 'Test') & (df['lineal'] == True) & (df['step'] == step)]['total_time_in_step']
    time_control_lineal = df[(df['variation'] == 'Control') & (df['lineal'] == True) & (df['step'] == step)]['total_time_in_step']

    time_test_non_lineal = df[(df['variation'] == 'Test') & (df['lineal'] == False) & (df['step'] == step)]['total_time_in_step']
    time_control_non_lineal = df[(df['variation'] == 'Control') & (df['lineal'] == False) & (df['step'] == step)]['total_time_in_step']

    t_stat_lineal, p_value_lineal = stats.ttest_ind(time_test_lineal, time_control_lineal, equal_var=False)

    t_stat_non_lineal, p_value_non_lineal = stats.ttest_ind(time_test_non_lineal, time_control_non_lineal, equal_var=False)

    return (t_stat_lineal, p_value_lineal), (t_stat_non_lineal, p_value_non_lineal)

def mann_whitney_test_variation(df):
    test_group = df[df['variation'] == 'Test']['total_time_in_step']
    control_group = df[df['variation'] == 'Control']['total_time_in_step']

    u_statistic, p_value = stats.mannwhitneyu(test_group, control_group, alternative='two-sided')

    return u_statistic, p_value

def mann_whitney_test_lineal(df):
    lineal_group = df[df['lineal'] == True]['total_time_in_step']
    non_lineal_group = df[df['lineal'] == False]['total_time_in_step']

    u_statistic, p_value = stats.mannwhitneyu(lineal_group, non_lineal_group, alternative='two-sided')

    return u_statistic, p_value

def chi_square_and_cramers_v(df):
    contingency_table = pd.crosstab(df['variation'], df['lineal'])

    chi2, p, dof, ex = chi2_contingency(contingency_table)

    n = contingency_table.sum().sum()
    cramers_v = np.sqrt(chi2 / (n * (min(contingency_table.shape) - 1)))

    return chi2, p, cramers_v

# Cargar los datos
df_vanguard = cargar_datos()

# Tabs para organizar la app
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
    "Introducci칩n",
    "Tasa de Finalizaci칩n", 
    "Tiempos por Paso", 
    "Tasa de Errores", 
    "Estad칤sticas de Tiempos", 
    "Correlaciones", 
    "Pruebas Estad칤sticas"
])

with tab1:
    st.markdown('''
    ## Introducci칩n al Proyecto de An치lisis A/B
    
    En este proyecto, realizamos un an치lisis A/B para comparar la **nueva versi칩n** de la web de Vanguard con la **versi칩n antigua**.
    El objetivo es evaluar el rendimiento de la nueva web a trav칠s de varias m칠tricas clave como:
    
    - **Tasa de finalizaci칩n**: Proporci칩n de usuarios que completan el proceso.
    - **Tiempos por paso**: Tiempo promedio que los usuarios tardan en completar cada paso del proceso.
    - **Tasa de errores**: Frecuencia de errores cometidos por los usuarios.
    
    Tambi칠n utilizamos diversas **pruebas estad칤sticas** para determinar si las diferencias observadas son **estad칤sticamente significativas**:
    
    - **T-test** y **Mann-Whitney**: Comparaci칩n de medias de tiempo entre grupos.
    - **Chi-square** y **Cram칠r's V**: An치lisis de asociaci칩n entre las variables categ칩ricas.
    - **Correlaciones de Pearson y Spearman**: Evaluamos la relaci칩n entre variables continuas como la actividad, edad, n칰mero de cuentas y balances de los clientes.
    
    Los resultados de este an치lisis nos permiten determinar si la nueva versi칩n de la web ofrece una **mejor experiencia** para los usuarios, bas치ndonos en su comportamiento durante el proceso de navegaci칩n.
    ''')

with tab2:
    st.subheader("Tasa de Finalizaci칩n")
    
    st.write("""
    La tasa de finalizaci칩n mide el porcentaje de usuarios que completaron el proceso de manera lineal. 
    El an치lisis se divide entre:
    
    - **Lineal=True**: Usuarios que completaron el proceso sin retroceder ni repetir pasos.
    - **Lineal=False**: Usuarios que retrocedieron o repitieron pasos m치s de dos veces.
    """)

    # Llamar a la funci칩n para calcular las tasas
    completion_rate_true, completion_rate_false, suma_tasas = calculate_completion_rates(df_filtrado)

    # Mostrar las tasas calculadas
    st.write("#### Tasa de finalizaci칩n (lineal=True)")
    st.write(completion_rate_true)

    st.write("#### Tasa de no finalizaci칩n (lineal=False)")
    st.write(completion_rate_false)

    st.write("#### Suma de tasas para cada grupo (deber칤a ser cercana a 1)")
    st.write(suma_tasas)

    # Mostrar insights sobre las tasas de finalizaci칩n
    st.write("""
    #### Insights:
    - En el grupo **Control** (versi칩n antigua de la web), el **46.05%** de los usuarios completaron el proceso de manera lineal.
    - En el grupo **Test** (nueva versi칩n de la web), el **47.46%** de los usuarios completaron el proceso de manera lineal.
    - En el grupo **Control**, el **53.94%** de los usuarios no completaron el proceso de manera lineal.
    - En el grupo **Test**, el **52.53%** de los usuarios no completaron el proceso de manera lineal.
    """)

    # Crear un gr치fico de barras para visualizar las tasas de finalizaci칩n
    st.subheader("Visualizaci칩n de las Tasas de Finalizaci칩n y No Finalizaci칩n")
    st.write("Gr치fico comparativo de las tasas de finalizaci칩n por grupo (Test vs Control):")
    
    # Crear un dataframe para visualizaci칩n
    completion_rates = pd.DataFrame({
        'Lineal=True': completion_rate_true,
        'Lineal=False': completion_rate_false
    })

    # Ajustar el 칤ndice del DataFrame para que sea 'variation' (Test vs Control)
    completion_rates = completion_rates.reset_index()

    # Generar gr치fico de barras con Plotly
    fig = px.bar(completion_rates, x='variation', y=['Lineal=True', 'Lineal=False'], barmode='group', title="Tasas de Finalizaci칩n y No Finalizaci칩n (Test vs Control)")
    st.plotly_chart(fig)

with tab3:
    st.subheader("4.1 Tiempos Promedio por Paso")
    
    # Introducci칩n al an치lisis de tiempos
    st.write("""
    En este apartado se analiza el tiempo que los usuarios tardan en completar cada paso del proceso de navegaci칩n, 
    comparando los grupos Test (nueva versi칩n de la web) y Control (versi칩n antigua), y diferenciando entre usuarios lineales 
    (que completan el proceso sin errores) y no lineales (que retroceden o repiten pasos).
    """)

    # Definir el orden correcto de los pasos
    step_order = ['start', 'step_1', 'step_2', 'step_3', 'confirm']

    # Llamar a la funci칩n para tiempos promedio
    avg_time_in_step_lineal = plot_avg_time_in_steps(df_filtrado, step_order)
    
    # Mostrar los datos procesados
    st.write("Tiempos promedio por paso y grupo:")
    st.write(avg_time_in_step_lineal)

    # Crear un gr치fico interactivo de l칤neas para visualizar los tiempos promedio por paso
    st.subheader("Visualizaci칩n de Tiempos Promedio por Paso")

    # Organizar los datos para el gr치fico
    df_grouped_time = df_filtrado.groupby(['variation', 'step', 'lineal'])['total_time_in_step'].mean().reset_index()

    # Asegurarse de que los pasos siguen el orden correcto
    df_grouped_time['step'] = pd.Categorical(df_grouped_time['step'], categories=step_order, ordered=True)

    # Crear el gr치fico con Plotly para visualizar las cuatro l칤neas
    fig_time = px.line(
        df_grouped_time, 
        x='step', 
        y='total_time_in_step', 
        color='variation', 
        line_dash='lineal',  # Agregar la variable lineal/no lineal como patr칩n de l칤nea
        markers=True, 
        title="Tiempos Promedio por Paso (Test vs Control - Lineal/No Lineal)"
    )
    
    # Mostrar el gr치fico en Streamlit
    st.plotly_chart(fig_time)


    # Mostrar Insights del an치lisis de tiempos
    st.write("""
    #### Insights:
    - **Usuarios no lineales**: Los usuarios no lineales en el grupo **Test** tardan m치s tiempo en completar los primeros pasos, 
      lo que sugiere posibles dificultades en la nueva versi칩n.
    - **Usuarios lineales**: Los usuarios lineales del grupo **Test** completan el proceso de manera m치s eficiente que los de 
      **Control**, lo que sugiere que la nueva versi칩n de la web es m치s eficiente para aquellos que no cometen errores.
    - **Pasos intermedios**: Los pasos **Step 2** y **Step 3** son m치s largos en ambos grupos, lo que refleja la complejidad de estas 
      etapas en el proceso.
    - **Paso Confirm**: La nueva versi칩n de la web ayuda a reducir el tiempo en el paso final (**Confirm**) para los usuarios no lineales.
    """)

with tab4:
    st.subheader("3.2 Tasa de Errores")
    
    # Introducci칩n al an치lisis de errores
    st.write("""
    La tasa de errores mide cu치ntos usuarios experimentaron dificultades durante el proceso, ya sea por retroceder 
    en los pasos o por repetirlos m치s de dos veces. Este an치lisis es esencial para identificar los puntos cr칤ticos 
    donde los usuarios tienen problemas, tanto en la versi칩n antigua de la web (grupo Control) como en la nueva (grupo Test).
    """)

    # Definir el orden correcto de los pasos
    step_order = ['start', 'step_1', 'step_2', 'step_3', 'confirm']

    # Llamar a la funci칩n para calcular la tasa de errores
    error_rate = plot_error_rate(df_filtrado, step_order)
    
    # Resetear el 칤ndice para asegurarnos de tener todas las columnas necesarias
    error_rate_reset = error_rate.reset_index()

    # Hacer melt del DataFrame para organizar los datos correctamente
    error_rate_melted = error_rate_reset.melt(id_vars=['variation', 'lineal'], value_vars=step_order, var_name='step', value_name='error_rate')

    # Visualizaci칩n del gr치fico de la tasa de errores
    st.subheader("Visualizaci칩n de la Tasa de Errores por Grupo y Tipo de Usuario")
    fig_error = px.line(
        error_rate_melted, 
        x='step', 
        y='error_rate', 
        color='variation', 
        line_dash='lineal',  # Diferenciar lineales y no lineales con l칤neas diferentes
        markers=True,
        title="Tasa de Errores por Grupo (Test vs Control - Lineal/No Lineal)",
        labels={"error_rate": "Tasa de Error"}
    )
    st.plotly_chart(fig_error)

    # Insights sobre la tasa de errores
    st.write("""
    #### Insight:
    - La tasa de errores es m치s alta en el paso **Start** para los usuarios **no lineales** en el grupo **Test** (34.62%) que en el grupo **Control** (23.37%). 
    Esto podr칤a indicar problemas en la nueva versi칩n de la web al inicio del proceso.
    
    - Los usuarios **Test** muestran tasas de error m치s altas en los primeros pasos, pero tasas m치s bajas en los 칰ltimos pasos (**Step 3** y **Confirm**) 
    comparado con **Control**. Esto sugiere una confusi칩n inicial, pero mejora en las etapas finales.
    
    - **Usuarios lineales**: No se detectaron errores en ninguno de los pasos para los usuarios lineales en ambos grupos, 
    lo que indica que aquellos que siguen el proceso correctamente no encuentran problemas significativos.
    """)

with tab5:
    st.subheader("4. Estad칤sticas de Tiempos: Media, Skewness, y Kurtosis")
    
    st.write("""
    Adem치s del an치lisis de los tiempos promedio, es crucial analizar la forma de la distribuci칩n de los tiempos 
    en cada paso para obtener una visi칩n m치s detallada del comportamiento de los usuarios. 
    Para ello, se calculan las siguientes m칠tricas:
    
    - **Media**: El tiempo promedio que los usuarios dedican a cada paso.
    - **Skewness (asimetr칤a)**: Indica si los tiempos est치n sesgados hacia un lado de la media.
    - **Kurtosis (curtosis)**: Mide la "cola" de la distribuci칩n, mostrando si hay valores extremos de tiempo.
    """)

    # Definir el orden correcto de los pasos
    step_order = ['start', 'step_1', 'step_2', 'step_3', 'confirm']

    # Llamar a la funci칩n para estad칤sticas de tiempos y mostrar los datos
    grouped_time_stats = calculate_and_plot_time_stats(df_filtrado, step_order)

    # Resetear el 칤ndice (para evitar MultiIndex)
    grouped_time_stats = grouped_time_stats.reset_index()

    # Mostrar el DataFrame de estad칤sticas
    st.write("#### Estad칤sticas de tiempos (Media, Skewness, y Kurtosis)")
    st.write(grouped_time_stats)

    # Graficar las m칠tricas (Media, Skewness y Kurtosis) con Plotly
    st.subheader("Visualizaci칩n de Estad칤sticas de Tiempos por Grupo y Paso")

    # Generar gr치fico de barras para la media
    fig_mean = px.bar(grouped_time_stats, x='step', y='mean', color='variation', 
                      barmode='group', title='Media de Tiempos por Grupo y Paso',
                      labels={'mean': 'Tiempo promedio (s)', 'step': 'Paso'})
    st.plotly_chart(fig_mean)

    # Generar gr치fico de barras para la skewness
    fig_skewness = px.bar(grouped_time_stats, x='step', y='skew', color='variation', 
                          barmode='group', title='Skewness por Grupo y Paso',
                          labels={'skew': 'Skewness', 'step': 'Paso'})
    st.plotly_chart(fig_skewness)

    # Generar gr치fico de barras para la kurtosis
    fig_kurtosis = px.bar(grouped_time_stats, x='step', y='kurtosis', color='variation', 
                          barmode='group', title='Kurtosis por Grupo y Paso',
                          labels={'kurtosis': 'Kurtosis', 'step': 'Paso'})
    st.plotly_chart(fig_kurtosis)

    # Mostrar insights
    st.write("""
    #### Insights:
    1. **Media (mean)**: Los usuarios no lineales del grupo Test tienden a pasar m치s tiempo en los pasos iniciales, 
       mientras que los usuarios lineales completan los pasos m치s r치pido en el grupo Test que en el grupo Control.
       
    2. **Skewness**: La asimetr칤a es alta en todos los pasos, especialmente en los pasos iniciales, lo que sugiere 
       que algunos usuarios tardan mucho m치s en completarlos.
       
    3. **Kurtosis**: La alta kurtosis en ambos grupos indica la presencia de valores extremos en los tiempos, 
       sugiriendo que una peque침a proporci칩n de usuarios experimenta grandes demoras en ciertos pasos.
    """)

with tab6:
    st.subheader("5. An치lisis de Correlaciones entre Variables")
    
    st.write("""
    En esta secci칩n se analizan las correlaciones entre diferentes variables relacionadas con los clientes, 
    como **balance**, **edad**, **actividad** (suma de logins y llamadas a soporte), y **n칰mero de cuentas**. 
    El objetivo es descubrir relaciones significativas que puedan influir en el comportamiento de los usuarios 
    y su rendimiento en el proceso de navegaci칩n en la web.
    
    ### 5.1 Correlaciones de Pearson y Spearman
    Se utilizan dos m칠todos para calcular las correlaciones:
    
    - **Correlaci칩n de Pearson**: Mide la relaci칩n lineal entre dos variables continuas. 
      Un valor cercano a 1 indica una fuerte correlaci칩n positiva, mientras que un valor cercano a -1 indica 
      una fuerte correlaci칩n negativa.
    - **Correlaci칩n de Spearman**: Mide la correlaci칩n mon칩tona entre dos variables, 
      lo que permite detectar relaciones que no son estrictamente lineales.
    """)

    # Llamar a la funci칩n para calcular y visualizar las correlaciones
    pearson_corr, spearman_corr = calculate_pearson_spearman_corr(df_filtrado)

    # Mostrar las matrices de correlaci칩n
    st.subheader("Matriz de Correlaci칩n de Pearson")
    st.write(pearson_corr)

    st.subheader("Matriz de Correlaci칩n de Spearman")
    st.write(spearman_corr)

    # Crear heatmaps para las correlaciones
    st.subheader("Visualizaci칩n: Heatmaps de Correlaciones")

    fig_pearson = px.imshow(pearson_corr, text_auto=True, aspect="auto", title="Correlaci칩n de Pearson")
    st.plotly_chart(fig_pearson)

    fig_spearman = px.imshow(spearman_corr, text_auto=True, aspect="auto", title="Correlaci칩n de Spearman")
    st.plotly_chart(fig_spearman)

    # Mostrar insights sobre las correlaciones
    st.write("""
    ### Insights:
    - **Balance y N칰mero de Cuentas**: La correlaci칩n es moderadamente positiva, sugiriendo que los clientes con m치s cuentas tienden a tener balances m치s altos.
    - **Balance y Edad**: Los clientes mayores tienden a tener balances m치s altos, con una correlaci칩n m치s fuerte en Spearman, indicando una relaci칩n no lineal.
    - **Balance y Actividad**: La correlaci칩n es baja pero positiva, sugiriendo que los clientes con balances m치s altos tienden a ser m치s activos.
    - **Actividad y N칰mero de Cuentas**: Existe una correlaci칩n moderada, lo que significa que los clientes con m치s cuentas tienden a ser m치s activos.
    - **Edad y Actividad**: Las correlaciones son muy bajas, sugiriendo que la edad no influye significativamente en la actividad de los clientes.
    """)

with tab7:
    st.subheader("6. Pruebas Estad칤sticas")
    
    st.write("""
    Para validar los resultados obtenidos y confirmar si las diferencias observadas entre los grupos 
    Test (nueva versi칩n de la web) y Control (versi칩n antigua) son significativas, se realizan una serie de pruebas estad칤sticas. 
    Entre las pruebas se incluyen:
    
    - **Prueba Z**: Para comparar las tasas de finalizaci칩n entre los grupos Test y Control.
    - **T-test**: Para comparar los tiempos de finalizaci칩n entre los usuarios de los grupos Test y Control, as칤 como entre usuarios lineales y no lineales.
    - **Prueba Mann-Whitney**: Para evaluar diferencias en tiempos entre los grupos cuando los datos no siguen una distribuci칩n normal.
    - **Prueba Chi-square**: Para evaluar la asociaci칩n entre las variables categ칩ricas (Test/Control y lineal/no lineal).
    - **Cram칠r's V**: Para medir la fuerza de la asociaci칩n entre variables categ칩ricas.
    """)

    st.write("### 6.1 Prueba Z para tasas de finalizaci칩n")
    stat, p_value = z_test_completion_rates(df_vanguard)
    st.write(f"**Estad칤stico Z**: {stat}")
    st.write(f"**Valor p**: {p_value}")
    
    if p_value < 0.05:
        st.write("La diferencia en las tasas de finalizaci칩n es **estad칤sticamente significativa**.")
    else:
        st.write("La diferencia en las tasas de finalizaci칩n **NO es estad칤sticamente significativa**.")
    
    st.write("### 6.2 T-test para tiempos de finalizaci칩n")
    step = 'confirm'
    (t_stat_lineal, p_value_lineal), (t_stat_non_lineal, p_value_non_lineal) = t_test_time_per_step(df_vanguard, step)

    st.write("**Resultados para usuarios lineales:**")
    st.write(f"**Estad칤stico t**: {t_stat_lineal}")
    st.write(f"**Valor p**: {p_value_lineal}")
    if p_value_lineal < 0.05:
        st.write("La diferencia en los tiempos de finalizaci칩n para usuarios lineales es **estad칤sticamente significativa**.")
    else:
        st.write("La diferencia en los tiempos de finalizaci칩n para usuarios lineales **NO es estad칤sticamente significativa**.")
    
    st.write("**Resultados para usuarios no lineales:**")
    st.write(f"**Estad칤stico t**: {t_stat_non_lineal}")
    st.write(f"**Valor p**: {p_value_non_lineal}")
    if p_value_non_lineal < 0.05:
        st.write("La diferencia en los tiempos de finalizaci칩n para usuarios no lineales es **estad칤sticamente significativa**.")
    else:
        st.write("La diferencia en los tiempos de finalizaci칩n para usuarios no lineales **NO es estad칤sticamente significativa**.")
    
    st.write("### 6.3 Prueba Mann-Whitney U para tiempos de finalizaci칩n")
    u_statistic_variation, p_value_variation = mann_whitney_test_variation(df_vanguard)
    st.write(f"**U-statistic (Test vs Control)**: {u_statistic_variation}")
    st.write(f"**P-value (Test vs Control)**: {p_value_variation}")
    
    if p_value_variation < 0.05:
        st.write("La diferencia entre los grupos Test y Control es **estad칤sticamente significativa**.")
    else:
        st.write("No hay una diferencia estad칤sticamente significativa entre los grupos Test y Control.")
    
    u_statistic_lineal, p_value_lineal = mann_whitney_test_lineal(df_vanguard)
    st.write(f"**U-statistic (Lineal vs No Lineal)**: {u_statistic_lineal}")
    st.write(f"**P-value (Lineal vs No Lineal)**: {p_value_lineal}")
    
    if p_value_lineal < 0.05:
        st.write("La diferencia entre usuarios lineales y no lineales es **estad칤sticamente significativa**.")
    else:
        st.write("No hay una diferencia estad칤sticamente significativa entre usuarios lineales y no lineales.")
    
    st.write("### 7. Prueba Chi-square y Cram칠r's V")
    chi2, p_value, cramers_v = chi_square_and_cramers_v(df_vanguard)
    st.write(f"**Chi-square statistic**: {chi2}")
    st.write(f"**P-value**: {p_value}")
    st.write(f"**Cram칠r's V**: {cramers_v}")
    
    if p_value < 0.05:
        st.write("La asociaci칩n entre 'variation' y 'lineal' es **estad칤sticamente significativa**.")
    else:
        st.write("No hay una asociaci칩n estad칤sticamente significativa entre 'variation' y 'lineal'.")
    
    st.write(f"La fuerza de la asociaci칩n medida por **Cram칠r's V** es: {cramers_v}")